// <auto-generated />
using System;
using System.Collections.Generic;
using HostData.Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ASPHost.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220616204629_Initialize")]
    partial class Initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.DiscountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("DiscountSum")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AllDiscounts");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.GuestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("GuestEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderDiscountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DiscountsId");

                    b.ToTable("OrderDiscountEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderGuestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("GuestsId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GuestsId");

                    b.ToTable("OrderGuestEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderPaymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PaymentTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentsId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("Sum")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId")
                        .IsUnique();

                    b.HasIndex("PaymentsId");

                    b.ToTable("OrderPaymentEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderPaymentTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("OrderPaymentTypeEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderPermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("OrderPermissionEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductsId");

                    b.ToTable("OrderProductEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderTableEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TablesId");

                    b.ToTable("OrderTableEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderWaiterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<List<Guid>>("PermissionId")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("OrderWaiterEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CloseTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<List<Guid>>("DiscountsId")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<List<Guid>>("GuestsId")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<List<Guid>>("PaymentsId")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<List<Guid>>("ProductsId")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<List<Guid>>("TablesId")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WaiterId")
                        .IsUnique();

                    b.ToTable("AllOrders");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.PaymentTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("NeedOpenCashBox")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypeEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.PermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("EmployeePermission")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PermissionsId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PermissionsId");

                    b.ToTable("AllPermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e256dce3-19e8-43f8-995f-5a7aa821c946"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(3862),
                            EmployeePermission = (byte)0,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("8a8ce162-257e-4f69-8aa9-b517404726e4"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(3894),
                            EmployeePermission = (byte)1,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("7c2ea4b6-8cd0-4ee2-8d22-ac3932ea905b"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(3897),
                            EmployeePermission = (byte)2,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("f578dc7d-4344-4d90-985a-d4b9eaca3661"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(3900),
                            EmployeePermission = (byte)3,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("666c73da-ba0e-4a74-88ad-7fb3154d6acc"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(3902),
                            EmployeePermission = (byte)4,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("55684f46-0dbb-48c9-b4b3-d927d53c7b3b"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(3908),
                            EmployeePermission = (byte)5,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("27aa8fa8-db9a-456c-9517-63966b832d78"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(3910),
                            EmployeePermission = (byte)6,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("368558a3-e579-457c-b9fa-35618cfd34ea"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(3912),
                            EmployeePermission = (byte)7,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("058db51d-b54a-4b18-8c25-8ff7f12e0aa0"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(3914),
                            EmployeePermission = (byte)8,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("e5fdef70-3f4c-48ed-b042-953727a84caf"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(3918),
                            EmployeePermission = (byte)9,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("5b537529-6e0c-4127-8e15-6172745d94be"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(3920),
                            EmployeePermission = (byte)10,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("a1460813-bfe1-4c7f-b658-62b5083f9e06"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(3931),
                            EmployeePermission = (byte)11,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("495f09fd-dfe2-45a0-b042-5731aede5c68"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(3942),
                            EmployeePermission = (byte)12,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("4921886e-0711-4179-bb86-dee55b8a6817"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(3945),
                            EmployeePermission = (byte)13,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("c689b455-0f8a-414b-8a69-64b165826792"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(3963),
                            EmployeePermission = (byte)14,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("a704fcde-ba5d-42be-89c8-f1e64ec8a522"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(3966),
                            EmployeePermission = (byte)15,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("0188f550-96ed-418c-b330-1e7af3e550b6"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(3968),
                            EmployeePermission = (byte)16,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("d90fb9f8-6e90-4de5-b239-23f45468931c"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(4032),
                            EmployeePermission = (byte)17,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("a93b13ab-a858-4d96-889d-4bfffe2fbfbc"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(4035),
                            EmployeePermission = (byte)18,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("31579291-81b3-4fa6-8e5b-e804695c00d6"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(4037),
                            EmployeePermission = (byte)19,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("9a7c7a24-5660-4237-bb95-a34687c33c1b"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(4039),
                            EmployeePermission = (byte)20,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("17402627-055f-4a02-ac5b-b8f34e8898bb"),
                            CreatedTime = new DateTime(2022, 6, 17, 1, 46, 19, 530, DateTimeKind.Local).AddTicks(4041),
                            EmployeePermission = (byte)21,
                            IsDeleted = false,
                            Version = 1,
                            WaiterCreatedId = new Guid("00000000-0000-0000-0000-000000000000"),
                            WaiterUpdatedId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AllProducts");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.TableEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AllTables");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.WaiterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AllWaiters");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.WaiterPermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<List<Guid>>("PermissionsId")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AllWaiterPermissions");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderDiscountEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.OrderEntity", "Order")
                        .WithMany("Discounts")
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HostData.Domain.Contracts.Entities.DiscountEntity", "Discount")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderGuestEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.OrderEntity", "Order")
                        .WithMany("Guests")
                        .HasForeignKey("GuestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HostData.Domain.Contracts.Entities.GuestEntity", "Guest")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderPaymentEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.Order.OrderPaymentTypeEntity", "Type")
                        .WithOne("Payment")
                        .HasForeignKey("HostData.Domain.Contracts.Entities.Order.OrderPaymentEntity", "PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HostData.Domain.Contracts.Entities.OrderEntity", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderPaymentTypeEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.PaymentTypeEntity", "PaymentType")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderPermissionEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.PermissionEntity", "PermissionEntity")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HostData.Domain.Contracts.Entities.Order.OrderWaiterEntity", "Waiter")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionEntity");

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderProductEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.ProductEntity", "ProductEntity")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HostData.Domain.Contracts.Entities.OrderEntity", "Order")
                        .WithMany("Products")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderTableEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.TableEntity", "TableEntity")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HostData.Domain.Contracts.Entities.OrderEntity", "Order")
                        .WithMany("Tables")
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("TableEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderWaiterEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.WaiterEntity", "WaiterEntity")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WaiterEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.OrderEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.Order.OrderWaiterEntity", "Waiter")
                        .WithOne("Order")
                        .HasForeignKey("HostData.Domain.Contracts.Entities.OrderEntity", "WaiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.PermissionEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.WaiterPermissionEntity", null)
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionsId");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderPaymentTypeEntity", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderWaiterEntity", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.OrderEntity", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("Guests");

                    b.Navigation("Payments");

                    b.Navigation("Products");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.WaiterPermissionEntity", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
