// <auto-generated />
using System;
using HostData.Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ASPHost.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.DiscountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DiscountSum")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.GuestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CloseTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WaiterId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.PaymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("Sum")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentTypeId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.PaymentTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("NeedOpenCashBox")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("PaymentType");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.PermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("EmployeePermission")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WaiterId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.TableEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.WaiterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Waiters");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.DiscountEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.OrderEntity", "Order")
                        .WithMany("Discounts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.GuestEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.OrderEntity", "Order")
                        .WithMany("Guests")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.OrderEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.WaiterEntity", "Waiter")
                        .WithOne("Order")
                        .HasForeignKey("HostData.Domain.Contracts.Entities.OrderEntity", "WaiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.PaymentEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.OrderEntity", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HostData.Domain.Contracts.Entities.PaymentTypeEntity", "Type")
                        .WithOne("Payment")
                        .HasForeignKey("HostData.Domain.Contracts.Entities.PaymentEntity", "PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.PermissionEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.WaiterEntity", "Waiter")
                        .WithMany("Permissions")
                        .HasForeignKey("WaiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.ProductEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.OrderEntity", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.TableEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.OrderEntity", "Order")
                        .WithMany("Tables")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.OrderEntity", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("Guests");

                    b.Navigation("Payments");

                    b.Navigation("Products");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.PaymentTypeEntity", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.WaiterEntity", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();

                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
