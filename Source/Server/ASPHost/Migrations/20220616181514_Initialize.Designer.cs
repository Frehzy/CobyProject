// <auto-generated />
using System;
using System.Collections.Generic;
using HostData.Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ASPHost.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220616181514_Initialize")]
    partial class Initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.DiscountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DiscountSum")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AllDiscounts");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.GuestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("GuestEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderDiscountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DiscountsId");

                    b.ToTable("OrderDiscountEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderGuestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GuestsId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GuestsId");

                    b.ToTable("OrderGuestEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderPaymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PaymentTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentsId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("Sum")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId")
                        .IsUnique();

                    b.HasIndex("PaymentsId");

                    b.ToTable("OrderPaymentEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderPaymentTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("OrderPaymentTypeEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderPermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("OrderPermissionEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductsId");

                    b.ToTable("OrderProductEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderTableEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TablesId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TablesId");

                    b.ToTable("OrderTableEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderWaiterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<List<Guid>>("PermissionId")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("OrderWaiterEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CloseTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<Guid>>("DiscountsId")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<List<Guid>>("GuestsId")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<List<Guid>>("PaymentsId")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<List<Guid>>("ProductsId")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<List<Guid>>("TablesId")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WaiterId")
                        .IsUnique();

                    b.ToTable("AllOrders");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.PaymentTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("NeedOpenCashBox")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypeEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.PermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("EmployeePermission")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PermissionsId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PermissionsId");

                    b.ToTable("AllPermissions");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AllProducts");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.TableEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AllTables");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.WaiterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AllWaiters");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.WaiterPermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<List<Guid>>("PermissionsId")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<Guid>("WaiterCreatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaiterUpdatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AllWaiterPermissions");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderDiscountEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.OrderEntity", "Order")
                        .WithMany("Discounts")
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HostData.Domain.Contracts.Entities.DiscountEntity", "Discount")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderGuestEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.OrderEntity", "Order")
                        .WithMany("Guests")
                        .HasForeignKey("GuestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HostData.Domain.Contracts.Entities.GuestEntity", "Guest")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderPaymentEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.Order.OrderPaymentTypeEntity", "Type")
                        .WithOne("Payment")
                        .HasForeignKey("HostData.Domain.Contracts.Entities.Order.OrderPaymentEntity", "PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HostData.Domain.Contracts.Entities.OrderEntity", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderPaymentTypeEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.PaymentTypeEntity", "PaymentType")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderPermissionEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.PermissionEntity", "PermissionEntity")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HostData.Domain.Contracts.Entities.Order.OrderWaiterEntity", "Waiter")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionEntity");

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderProductEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.ProductEntity", "ProductEntity")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HostData.Domain.Contracts.Entities.OrderEntity", "Order")
                        .WithMany("Products")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderTableEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.TableEntity", "TableEntity")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HostData.Domain.Contracts.Entities.OrderEntity", "Order")
                        .WithMany("Tables")
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("TableEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderWaiterEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.WaiterEntity", "WaiterEntity")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WaiterEntity");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.OrderEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.Order.OrderWaiterEntity", "Waiter")
                        .WithOne("Order")
                        .HasForeignKey("HostData.Domain.Contracts.Entities.OrderEntity", "WaiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.PermissionEntity", b =>
                {
                    b.HasOne("HostData.Domain.Contracts.Entities.WaiterPermissionEntity", null)
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionsId");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderPaymentTypeEntity", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.Order.OrderWaiterEntity", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.OrderEntity", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("Guests");

                    b.Navigation("Payments");

                    b.Navigation("Products");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("HostData.Domain.Contracts.Entities.WaiterPermissionEntity", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
